name: Build and deploy workflow

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: clone code on ${{ runner.os }}
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff
      - name: lint with ruff
        run: |
          ruff --format=github --select=E9,F63,F7,F82 --target-version=py37 .
      - name: docker build
        run: docker build -t dalbezh/todolist-api:$GITHUB_REF_NAME-$GITHUB_RUN_ID .
      - name: docker login
        run: echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: docker push
        run: docker push dalbezh/todolist-api:$GITHUB_REF_NAME-$GITHUB_RUN_ID
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
    steps:
      - name: clone code
        uses: actions/checkout@v2
      - name: print directory content
        run: ls -al
      - name: render configs
        run: |
          mkdir deploy
          cat infra/docker-compose.ci.yaml | envsubst > deploy/docker-compose_todolist.yml
      - name: print compose file
        run: cat deploy/docker-compose_todolist.yml
      - name: copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.HOST_USER_KEY }}
          port: ${{ secrets.HOST_PORT }}
          source: "deploy/docker-compose_todolist.yml"
          target: "deploy"
          strip_components: 1
      - name: deploy app
        uses: appleboy/ssh-action@master
        env:
          DEBUG: False
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          LANGUAGE_CODE: ${{ secrets.LANGUAGE_CODE }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SOCIAL_AUTH_VK_OAUTH2_KEY : ${{ secrets.SOCIAL_AUTH_VK_OAUTH2_KEY }}
          SOCIAL_AUTH_VK_OAUTH2_SECRET: ${{ secrets.SOCIAL_AUTH_VK_OAUTH2_SECRET }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.HOST_USER_KEY }}
          port: ${{ secrets.HOST_PORT }}
          envs: DEBUG,SECRET_KEY,LANGUAGE_CODE,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB,DATABASE_URL,SOCIAL_AUTH_VK_OAUTH2_KEY,SOCIAL_AUTH_VK_OAUTH2_SECRET,BOT_TOKEN
          script_stop: true
          debug: true
          script: |
            cd deploy
            echo DEBUG=$DEBUG > .env.prod
            echo SECRET_KEY=$SECRET_KEY >> .env.prod
            echo LANGUAGE_CODE=$LANGUAGE_CODE >> .env.prod
            echo POSTGRES_USER=$POSTGRES_USER >> .env.prod
            echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> .env.prod
            echo POSTGRES_DB=$POSTGRES_DB >> .env.prod
            echo DATABASE_URL=$DATABASE_URL >> .env.prod
            echo SOCIAL_AUTH_VK_OAUTH2_KEY=$SOCIAL_AUTH_VK_OAUTH2_KEY >> .env.prod
            echo SOCIAL_AUTH_VK_OAUTH2_SECRET=$SOCIAL_AUTH_VK_OAUTH2_SECRET >> .env.prod
            echo BOT_TOKEN=$BOT_TOKEN >> .env.prod
            docker compose --env-file .env.prod -f docker-compose_todolist.yml up -d
            rm .env.prod